/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 20000000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("col_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("col_in[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "col_in";
}

SIGNAL("col_in[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "col_in";
}

SIGNAL("col_in[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "col_in";
}

SIGNAL("col_in[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "col_in";
}

SIGNAL("row_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("row_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "row_out";
}

SIGNAL("row_out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "row_out";
}

SIGNAL("row_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "row_out";
}

SIGNAL("row_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "row_out";
}

SIGNAL("a_ok_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("a_select_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("a_select_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "a_select_out";
}

SIGNAL("a_select_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "a_select_out";
}

SIGNAL("b_ok_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("b_select_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("b_select_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "b_select_out";
}

SIGNAL("b_select_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "b_select_out";
}

SIGNAL("ready_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("show_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("start_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("a_select_final")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("a_select_final[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "a_select_final";
}

SIGNAL("a_select_final[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "a_select_final";
}

SIGNAL("b_select_final")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("b_select_final[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "b_select_final";
}

SIGNAL("b_select_final[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "b_select_final";
}

TRANSITION_LIST("clk_in")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2000;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
		}
	}
}

TRANSITION_LIST("col_in[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 276480.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 112640.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 1100800.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 92160.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 204800.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 122880.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 87040.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 92160.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 87040.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 261120.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 92160.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 17081600.0;
	}
}

TRANSITION_LIST("col_in[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 276480.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 112640.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 1100800.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 92160.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 389120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 76800.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 92160.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 87040.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 15360.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 81920.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 17358080.0;
	}
}

TRANSITION_LIST("col_in[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 276480.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 112640.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 1459200.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 122880.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 76800.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 245760.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 81920.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 81920.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 92160.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 17081600.0;
	}
}

TRANSITION_LIST("col_in[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1571840.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 92160.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 204800.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 122880.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 76800.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 92160.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 87040.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 5120.0;
		LEVEL 1 FOR 5120.0;
		LEVEL 0 FOR 15360.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 81920.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 81920.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 92160.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 10240.0;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 17081600.0;
	}
}

TRANSITION_LIST("row_out[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 53;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 18;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 260.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 12009;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 863;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 318;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 5200.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 959;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		NODE
		{
			REPEAT = 110727;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
	}
}

TRANSITION_LIST("row_out[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 107;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 39;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 24019;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 1727;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 638;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 5160.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 1919;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 221455;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
	}
}

TRANSITION_LIST("row_out[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 214;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 32;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 79;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 48038;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3455;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 1278;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 5140.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3839;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 442911;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
	}
}

TRANSITION_LIST("row_out[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 429;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 190.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 67;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 190.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 160;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 210.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 96078;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 6910;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 2558;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5130.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 7679;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 885823;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("a_ok_out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("a_select_out[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 500000;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
	}
}

TRANSITION_LIST("a_select_out[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000000;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("b_ok_out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("b_select_out[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 500000;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
	}
}

TRANSITION_LIST("b_select_out[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000000;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("ready_out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("show_out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("start_out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("a_select_final[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("a_select_final[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("b_select_final[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

TRANSITION_LIST("b_select_final[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20000000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk_in";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "col_in";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5;
}

DISPLAY_LINE
{
	CHANNEL = "col_in[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "col_in[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "col_in[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "col_in[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "row_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
	CHILDREN = 7, 8, 9, 10;
}

DISPLAY_LINE
{
	CHANNEL = "row_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "row_out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "row_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "row_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "start_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ready_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "show_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a_select_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
	CHILDREN = 15, 16;
}

DISPLAY_LINE
{
	CHANNEL = "a_select_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "a_select_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "b_select_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
	CHILDREN = 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "b_select_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "b_select_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "a_ok_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "b_ok_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "a_select_final";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
	CHILDREN = 23, 24;
}

DISPLAY_LINE
{
	CHANNEL = "a_select_final[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "a_select_final[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "b_select_final";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 25;
	TREE_LEVEL = 0;
	CHILDREN = 26, 27;
}

DISPLAY_LINE
{
	CHANNEL = "b_select_final[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 25;
}

DISPLAY_LINE
{
	CHANNEL = "b_select_final[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Octal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 25;
}

TIME_BAR
{
	TIME = 7280000;
	MASTER = TRUE;
}
;
